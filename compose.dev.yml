version: '3.9'

networks:
  network-a:
    driver: bridge

services:

  web:
    build:
      context: ./docker/node
      args:
        node_version: 16
        npm_version: 8
        angular_version: 13
    ports:
      - ${PORT_PREFIX}01:4200
    volumes:
      - ${SRC_WEB}:/home/node/app
    command:
      - npm run start
    networks:
      - network-a
    restart: unless-stopped

  backoffice:
    build:
      context: ./docker/node
      args:
        node_version: 16
        npm_version: 8
        angular_version: 13
    ports:
      - ${PORT_PREFIX}02:4200
    volumes:
      - ${SRC_BACKOFFICE}:/home/node/app
    command:
      - npm run start
    networks:
      - network-a
    restart: unless-stopped

  backend:
    build:
      context: ./docker/nginx
      args:
        nginx_version: 1.21.4
    depends_on:
      - backend-php
      - database
    ports:
      - ${PORT_PREFIX}05:80
    volumes:
      - ./docker/nginx/php.default.conf:/etc/nginx/conf.d/default.conf
      - ${SRC_BACKEND}:/var/www/html
    networks:
      - network-a
    restart: unless-stopped

  backend-php:
    build:
      context: ./docker/php
      args:
        php_version: 8.0.13-fpm
    ports:
      - ${PORT_PREFIX}06:9000
    volumes:
      - ./docker/php/php.ini:/usr/local/etc/php/php.ini
      - ${SRC_BACKEND}:/var/www/html
    networks:
      - network-a
    restart: unless-stopped

  database:
    build:
      context: ./docker/postgres
      args:
        postgres_version: 14.1
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - ${PORT_PREFIX}10:5432
    volumes:
      - ./docker/_data/postgres:/var/lib/postgresql/data
    networks:
      - network-a
    restart: unless-stopped