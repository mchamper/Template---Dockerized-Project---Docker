ARG PHP_VERSION=latest

FROM maxmindinc/geoipupdate:latest AS geoipupdate

FROM php:${PHP_VERSION}-fpm-alpine

WORKDIR /docker/src

# Crear un usuario y grupo no privilegiado
RUN addgroup -g 1000 docker && \
  adduser -G docker -u 1000 -D -s /bin/sh docker && \
  chown -R docker:docker /docker/src /var/www/html

# Instalar dependencias básicas de Alpine
RUN apk add --update --no-cache \
  linux-headers \
  bash \
  curl \
  git \
  zip \
  unzip \
  g++ \
  make \
  openssh \
  openssl \
  putty \
  rsync \
  groff \
  supervisor

# Instalar librerías necesarias para extensiones PHP
RUN apk add --no-cache \
  $PHPIZE_DEPS \
  ffmpeg \
  libpng-dev \
  libjpeg-turbo-dev \
  libwebp-dev \
  freetype-dev \
  libxml2-dev \
  oniguruma-dev \
  postgresql-dev \
  icu-dev \
  unixodbc \
  unixodbc-dev \
  freetds-dev \
  libtool \
  libmemcached-dev \
  libzip-dev \
  cyrus-sasl-dev

# Instalar extensiones PHP
RUN docker-php-ext-configure gd --with-freetype --with-jpeg --with-webp && \
  docker-php-ext-install \
  gd \
  intl \
  mbstring \
  pdo \
  pdo_mysql \
  pdo_pgsql \
  xml \
  exif \
  zip \
  opcache \
  pcntl && \
  docker-php-ext-enable opcache

# Copiar archivos de configuración de php
COPY php.ini /usr/local/etc/php/conf.d/000_php.ini

# Instalar y configurar Xdebug
ARG XDEBUG_CLIENT_HOST=host.docker.internal
RUN pecl install xdebug && \
  docker-php-ext-enable xdebug && \
  echo "zend_extension=$(php-config --extension-dir)/xdebug.so" > /usr/local/etc/php/conf.d/xdebug.ini && \
  echo "xdebug.mode=debug" >> /usr/local/etc/php/conf.d/xdebug.ini && \
  echo "xdebug.start_with_request=yes" >> /usr/local/etc/php/conf.d/xdebug.ini && \
  echo "xdebug.client_host=${XDEBUG_CLIENT_HOST}" >> /usr/local/etc/php/conf.d/xdebug.ini && \
  echo "xdebug.client_port=9003" >> /usr/local/etc/php/conf.d/xdebug.ini

# Configurar cronjobs
RUN touch /var/log/cron.log && chown docker:docker /var/log/cron.log
RUN echo "* * * * * php /var/www/html/artisan schedule:run >> /var/log/cron.log 2>&1" > /etc/crontabs/docker
RUN crontab /etc/crontabs/docker

# Instalar y configurar Microsoft SQL Server driver
RUN curl -L https://download.microsoft.com/download/7/6/d/76de322a-d860-4894-9945-f0cc5d6a45f8/msodbcsql18_18.4.1.1-1_amd64.apk -o msodbcsql18.apk && \
  curl -L https://download.microsoft.com/download/7/6/d/76de322a-d860-4894-9945-f0cc5d6a45f8/mssql-tools18_18.4.1.1-1_amd64.apk -o mssql-tools18.apk && \
  apk add --allow-untrusted msodbcsql18.apk mssql-tools18.apk && \
  rm msodbcsql18.apk mssql-tools18.apk && \
  pecl install pdo_sqlsrv sqlsrv && \
  docker-php-ext-enable pdo_sqlsrv sqlsrv

# Instalar y configurar Memcached
RUN pecl install memcached && \
  docker-php-ext-enable memcached

# Instalar Composer
ARG COMPOSER_VERSION=latest
COPY --from=composer:${COMPOSER_VERSION} /usr/bin/composer /usr/bin/composer

# Instalar y configurar GeoIPupdate
ARG GEOIPUPDATE_ACCOUNT_ID=
ARG GEOIPUPDATE_LICENSE_KEY=
ARG GEOIPUPDATE_EDITION_IDS=
ARG GEOIPUPDATE_DIRECTORY=/usr/share/GeoIP
COPY --from=geoipupdate /usr/bin/geoipupdate /usr/bin/geoipupdate
RUN echo "AccountID ${GEOIPUPDATE_ACCOUNT_ID}" > /usr/local/etc/GeoIP.conf && \
  echo "LicenseKey ${GEOIPUPDATE_LICENSE_KEY}" >> /usr/local/etc/GeoIP.conf && \
  echo "EditionIDs ${GEOIPUPDATE_EDITION_IDS}" >> /usr/local/etc/GeoIP.conf && \
  echo "DatabaseDirectory ${GEOIPUPDATE_DIRECTORY}" >> /usr/local/etc/GeoIP.conf && \
  /usr/bin/geoipupdate && \
  chown -R docker:docker ${GEOIPUPDATE_DIRECTORY}

# Exponer el puerto de PHP-FPM
EXPOSE 9000

# Cambiar al usuario no privilegiado
USER docker
